#! /bin/bash

 # Copyright (C) 2020, ownCloud GmbH.
 #
 # This code is covered by the GNU Public License Version 3.
 #
 # For distribution utilizing Apple mechanisms please see https://owncloud.org/contribute/iOS-license-exception/
 # You should have received a copy of this license along with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.en.html>.

VERSION="1.3.1"

#Define output formats
BOLD="$(tput bold)"
UNDERLINED="$(tput smul)"
NOTUNDERLINED="$(tput rmul)"
WARN="$(tput setaf 1)"
SUCCESS="$(tput setaf 2)"
INFO="$(tput setaf 3)"
NC="$(tput sgr0)" # No Color

# Abort the script if running via SSH since it will not be possible to sign (no access to the KeyChain)
# Check if SSH environment variables are set
if [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_TTY" ]; then
    echo "${WARN}Error: Running via SSH cannot access the certificate in the Keychain.${NC}"
    exit 1
fi

usage()
{
  echo "Usage:  $0 CERTIFICATE_IDENTITY"
  echo "        $0 \"Certificate Identity\""
  echo "        $0 \"Certificate Identity\""
  echo "Version: ${VERSION}"
  echo ""
  echo "Found Certificate Identities:"
  echo "     Fingerprint                              \"Certificate Identity\""
  echo "     -----------------------------------------------------------------"
  security find-identity -pcodesigning -v
  exit 1
}

#Check if all required parameters exist
if [ $# -lt 1 ]; then
  usage
fi

echo
echo "${BOLD}${SUCCESS}ownCloud iOS-App Resigning${NC}"
echo "Version ${VERSION}"
echo
echo "${SUCCESS}Starting resign process…${NC}"
echo ""

#Define variables
IDENTITY=$1
BUILD_DIR="App"
DATESTRING=`date +"%Y_%m_%d_%H_%M"`
NAME_FINAL_IPA="signed_$DATESTRING.ipa"
UNSIGNED_IPA="$BUILD_DIR/unsigned.ipa"
ERROR_SHA=0
FINAL_IPA="$BUILD_DIR/$NAME_FINAL_IPA"
APPTEMP="$BUILD_DIR/apptemp"
APPPAYLOAD="$APPTEMP/Payload"
APPDIR="$APPPAYLOAD/ownCloud.app"
PROVISIONING_DIR="Provisioning Files"
CURRENT_PATH=$(pwd)

DISTRIBUTION_MOBILEPROVISION="$PROVISIONING_DIR/App.mobileprovision"
FILEPROVIDER_MOBILEPROVISION="$PROVISIONING_DIR/FileProvider.mobileprovision"
FILEPROVIDERUI_MOBILEPROVISION="$PROVISIONING_DIR/FileProviderUI.mobileprovision"
INTENT_MOBILEPROVISION="$PROVISIONING_DIR/Intent.mobileprovision"
SHAREEXTENSION_MOBILEPROVISION="$PROVISIONING_DIR/ShareExtension.mobileprovision"
ACTIONEXTENSION_MOBILEPROVISION="$PROVISIONING_DIR/ActionExtension.mobileprovision"
ASSOCIATED_DOMAINS="domains.txt"

declare -a MOBILEPROVISIONS=(       "$DISTRIBUTION_MOBILEPROVISION"    "$FILEPROVIDER_MOBILEPROVISION"  "$FILEPROVIDERUI_MOBILEPROVISION"  "$INTENT_MOBILEPROVISION"  "$SHAREEXTENSION_MOBILEPROVISION"  "$ACTIONEXTENSION_MOBILEPROVISION"  );
declare -a ENTITLEMENTS=(   "ownCloud.entitlements"  "ownCloud_File_Provider.entitlements" "ownCloud_File_Provider_UI.entitlements" "ownCloud_Intents.entitlements" "ownCloud_Share_Extension.entitlements" "ownCloud_Action_Extension.entitlements" );
declare -a LOCATIONS=(      "$APPDIR"   "$APPDIR/PlugIns/ownCloud File Provider.appex"  "$APPDIR/PlugIns/ownCloud File Provider UI.appex"  "$APPDIR/PlugIns/ownCloud Intents.appex"  "$APPDIR/PlugIns/ownCloud Share Extension.appex"  "$APPDIR/PlugIns/ownCloud Action Extension.appex" );
declare -a BUNDLEIDS=();

# Abort script if script is running in a path which contains "Library", because this could cause resource fork problems
if [[ $CURRENT_PATH == *"/Library/"* ]]; then
  echo "${WARN}Error: The script cannot be executed in the path /Library/ or one of its subfolders.${NC}"
  exit 1
fi

# Delete previous temporal app folder if exist
if [ -d  "$APPTEMP" ]; then
    rm -rf "$APPTEMP"
fi

if [ ! -f "$UNSIGNED_IPA" ]; then
    echo "${WARN}Error: can't find $UNSIGNED_IPA in the current directory${NC}"
    exit 1
fi

# Get certificate SHA-1
CERT_SHA_1=`security find-certificate -c "$IDENTITY" -Z | grep "^SHA-1" | cut -d: -f 2 | xargs`
CERT_SHA_256=`security find-certificate -c "$IDENTITY" -Z | grep "^SHA-256" | cut -d: -f 2 | xargs`
# Create temp directory
mkdir $APPTEMP

echo "${UNDERLINED}${SUCCESS}Checking Provisioning Profiles:${NOTUNDERLINED}"

for a in "${MOBILEPROVISIONS[@]}"
do
    if [ ! -f "./$a" ]; then
    echo "${WARN}Error: can't find $a in the current directory${NC}"
    exit 1
else
	# Convert provisioning profile to plist
	security cms -D -i "$a" > "$APPTEMP/tmp.plist"
	# Get provisioning SHA-1
	PROV_SHA_1=`/usr/libexec/PlistBuddy -c "Print :DeveloperCertificates:0" $APPTEMP/tmp.plist | openssl x509 -inform der -fingerprint | grep "^SHA1" | cut -d= -f 2 | ruby -ne 'puts $_.split(":").join'`
	PROV_SHA_256=`/usr/libexec/PlistBuddy -c "Print :DeveloperCertificates:0" $APPTEMP/tmp.plist | openssl x509 -inform der -fingerprint | grep "^SHA256" | cut -d= -f 2 | ruby -ne 'puts $_.split(":").join'`

  rm -f "$APPTEMP/tmp.plist"

	if [ "$CERT_SHA_1" = "$PROV_SHA_1" ]; then
  		echo "${SUCCESS}Provisioning fingerprint SHA-1 matches with certificate:${NC}"
	  	echo "${INFO}$a${NC}"
  		echo ""
  	elif [ "$CERT_SHA_256" = "$PROV_SHA_256" ]; then
  		echo "${SUCCESS}Provisioning fingerprint SHA-256 matches with certificate:${NC}"
	  	echo "${INFO}$a${NC}"
  		echo ""
	else
  		echo ""
	  	echo "${WARN}The provisioning fingerprint does not match with the certificate fingerprint:${NC}"
  		echo "Provisioning Profile:	  	${INFO}$a${NC}"
	  	echo "Certificate Fingerprint (SHA-1):  	${INFO}$CERT_SHA_1${NC}"
	  	echo "Provisioning Fingerprint (SHA-1): 	${INFO}$PROV_SHA_1${NC}"
	  	echo "Certificate Fingerprint (SHA-256):  	${INFO}$CERT_SHA_256${NC}"
	  	echo "Provisioning Fingerprint (SHA-256): 	${INFO}$PROV_SHA_256${NC}"
  		ERROR_SHA=1
	fi
fi
done

if [ "$ERROR_SHA" = 1 ]; then
	echo ""
	echo "Please check that you are using the correct certificate identity and the provisioning profile was signed with the chosen certificate identity."
	echo "${WARN}Exit resigning. Please fix the errors above.${NC}"
	exit
fi

export PATH=$PATH:/usr/libexec

# Unzip ipa
echo "${SUCCESS}Unzipping ipa…${NC}"
echo ""
unzip -q "$UNSIGNED_IPA" -d "$APPTEMP" || { echo "${WARN}Failed to unzip ipa file${NC}"; exit 1; }


# Profile
# security cms -D -i ~/Downloads/App.mobileprovision > ~/Downloads/App.plist
# /usr/libexec/PlistBuddy -c "Print :DeveloperCertificates:0" ~/Downloads/App.plist | openssl x509 -inform der -fingerprint | grep "^SHA1" | cut -d= -f 2 | ruby -ne 'puts $_.split(":").join'


for (( i=0; i<${#MOBILEPROVISIONS[@]}; i++ ));
do
    echo "${UNDERLINED}${SUCCESS}Module:${NOTUNDERLINED}"
    echo "${INFO}${LOCATIONS[$i]}${NC}"
    echo ""
    echo "Provisioning: ${INFO}${MOBILEPROVISIONS[$i]}${NC}"
    echo "Entitlements: ${INFO}${ENTITLEMENTS[$i]}${NC}"
    echo ""

    # Duplicate each mobile provision as embedded.mobileprovision and move to correct destination folder
    cp "${MOBILEPROVISIONS[$i]}" "$BUILD_DIR/embedded.mobileprovision"

    {
      mv "$BUILD_DIR/embedded.mobileprovision" "${LOCATIONS[$i]}"
    } || { # catch
      echo "${WARN}ERROR${NC}"
    }

    echo "${SUCCESS}Creating entitlements…${NC}"
    # Get entitlements from provisioning profile
    PlistBuddy -x -c "print :Entitlements " /dev/stdin <<< $(security cms -D -i "./${MOBILEPROVISIONS[$i]}") > "${ENTITLEMENTS[$i]}.tmp"
    # Get all entitlements from app binary
    codesign -d --entitlements :- "${LOCATIONS[$i]}" > "${ENTITLEMENTS[$i]}"

    TEAMID=`PlistBuddy -c "print com.apple.developer.team-identifier " "${ENTITLEMENTS[$i]}.tmp"`
    echo "TeamId: ${INFO}$TEAMID${NC}"
    APPGROUP=`PlistBuddy -c "print com.apple.security.application-groups:0 " "${ENTITLEMENTS[$i]}.tmp"`
    echo "AppGroup: ${INFO}$APPGROUP${NC}"
    APP_ID_PREFIX=`PlistBuddy -c "print :ApplicationIdentifierPrefix:0" /dev/stdin <<< $(security cms -D -i "./${MOBILEPROVISIONS[$i]}")`
    echo "ApplicationIdentifierPrefix: ${INFO}$APP_ID_PREFIX${NC}"

    # Modify entitlements
    PlistBuddy -c "Set keychain-access-groups:0 $APP_ID_PREFIX.$APPGROUP" "${ENTITLEMENTS[$i]}"

    echo ""
    echo "${SUCCESS}Modify ${INFO}${LOCATIONS[$i]}/Info.plist${NC}…"
    # Modify Info.plists
    BUNDLEID=( `PlistBuddy -c "print application-identifier " ${ENTITLEMENTS[$i]}.tmp | sed 's/^.\{11\}//'` )
    echo "Set Bundle ID: ${INFO}${BUNDLEID}${NC}"
    PlistBuddy -c "Set CFBundleIdentifier ${BUNDLEID}" "${LOCATIONS[$i]}/Info.plist"
    PlistBuddy -c "Set application-identifier ${TEAMID}.${BUNDLEID}" "${ENTITLEMENTS[$i]}"

    # Modify Info.plists with ownCloud custom variables
    PlistBuddy -c "Set OCAppGroupIdentifier $APPGROUP" "${LOCATIONS[$i]}/Info.plist"
    PlistBuddy -c "Set com.apple.security.application-groups:0 ${APPGROUP}" "${ENTITLEMENTS[$i]}"
    PlistBuddy -c "Set OCKeychainAccessGroupIdentifier $APPGROUP" "${LOCATIONS[$i]}/Info.plist"
    PlistBuddy -c "Set com.apple.security.application-groups:0 ${APPGROUP}" "${ENTITLEMENTS[$i]}"
    PlistBuddy -c "Set OCAppIdentifierPrefix $APP_ID_PREFIX." "${LOCATIONS[$i]}/Info.plist"
    PlistBuddy -c "Set com.apple.developer.team-identifier ${TEAMID}" "${ENTITLEMENTS[$i]}"

    if [[ "${ENTITLEMENTS[$i]}" =~ ^(ownCloud_File_Provider.entitlements)$ ]]; then
	    PlistBuddy -c "Set NSExtension:NSExtensionFileProviderDocumentGroup $APPGROUP" "${LOCATIONS[$i]}/Info.plist"
	  fi

    if [[ "${ENTITLEMENTS[$i]}" =~ ^(ownCloud.entitlements)$ ]]; then
        ## Add associated domains
        if [ ! -z "$ASSOCIATED_DOMAINS" ]; then
            PlistBuddy -c "Delete com.apple.developer.associated-domains array" "${ENTITLEMENTS[$i]}"
            PlistBuddy -c "Add com.apple.developer.associated-domains array" "${ENTITLEMENTS[$i]}"
            let COUNT=0;
            for DOMAIN in $(cat $ASSOCIATED_DOMAINS)
            do
                echo "Adding associated domain: ${INFO}$DOMAIN${NC} into entitlement: ${INFO}${ENTITLEMENTS[$i]}${NC}"
                PlistBuddy -c "Add com.apple.developer.associated-domains:$COUNT string applinks:$DOMAIN" "${ENTITLEMENTS[$i]}"
                ((COUNT++))
                if [[ $COUNT -eq 20 ]]; then
                    echo "${WARN}Can not add more then 20 associated-domains as per apple guide lines${NC}";
                    break;
                fi
            done
        fi
    fi

    # Remove old Code Signatures
    rm -rf "${LOCATIONS[$i]}/_CodeSignature"
    echo ""
done

echo "${SUCCESS}Resign App, Extensions and Frameworks…${NC}"
echo ""

#Resign Swift & Frameworks Libraries
ls "${APPDIR}/Frameworks" | while read file
do
    /usr/bin/codesign -fv -s "$IDENTITY" "${APPDIR}/Frameworks/$file" #--entitlements "${ENTITLEMENTS[0]}"
done

# Resign everything
for (( i=(${#MOBILEPROVISIONS[@]} - 1); i>=0; i-- ));
do
    /usr/bin/codesign -fv -s "$IDENTITY" "${LOCATIONS[$i]}" --entitlements "${ENTITLEMENTS[$i]}"
done


# Generate new Payload
echo ""
echo "${SUCCESS}Packing new ipa…${NC}"
pushd "$APPTEMP"
zip -q -r "$NAME_FINAL_IPA" *
popd

mv "$APPTEMP/$NAME_FINAL_IPA" $FINAL_IPA

echo ""
echo "${SUCCESS}Removing temporal items…${NC}"

# Delete temporal payload folder
echo "Removing temporal folder $APPTEMP"
rm -rf "$APPTEMP"
echo "Removing payload folder $APPPAYLOAD"
rm -rf "$APPPAYLOAD"

# Delete temporal entitlements files
for (( i=0; i<${#ENTITLEMENTS[@]}; i++ ));
do
    if [ -f  "${ENTITLEMENTS[$i]}" ]; then
    	echo "Removing temporal ${ENTITLEMENTS[$i]}"
    	rm -rf "${ENTITLEMENTS[$i]}"
    	rm -rf "${ENTITLEMENTS[$i]}.tmp"
    fi

done

echo
echo "${SUCCESS}Signed file:${NC} ${FINAL_IPA}"
echo
echo "${BOLD}${SUCCESS}Signing complete.${NC}"
echo
